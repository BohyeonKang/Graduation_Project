import numpy as np

def PE_1dconv(ifmap_row, weights, p, q, s):
    """
    제공된 그림에 설명된 convolution-like 연산을 수행합니다.
    weights는 p x (q*s) 크기의 2D 배열로 직접 입력받습니다.

    Args:
        ifmap_row (list or np.array): 입력 feature map의 한 행을 나타내는 1D 배열입니다.
                                      길이는 q * s 여야 합니다.
        weights (list of lists or np.array): 가중치를 나타내는 2D 배열입니다.
                                           크기는 p x (q * s) 여야 합니다.
        p (int): 가중치 배열의 행 수 (커널 수).
        q (int): 입력 feature map과 가중치 배열의 "블록" 또는 "그룹" 수.
        s (int): 각 블록 내의 요소 수.

    Returns:
        np.array: 각 커널에 대한 ACC(Accumulation) 결과를 포함하는 1D 배열입니다.
                  길이는 p 입니다.
    """

    expected_ifmap_len = q * s
    if len(ifmap_row) != expected_ifmap_len:
        raise ValueError(f"ifmap_row의 길이는 q * s ({expected_ifmap_len})와 같아야 하지만, 실제 길이는 {len(ifmap_row)}입니다.")

    weights = np.array(weights) # NumPy 배열로 변환

    if weights.ndim != 2:
        raise ValueError(f"weights는 2차원 배열이어야 하지만, 실제 차원은 {weights.ndim}입니다.")
    if weights.shape[0] != p:
        raise ValueError(f"weights 배열의 행 수는 p ({p})와 같아야 하지만, 실제 행 수는 {weights.shape[0]}입니다.")
    # q*s는 ifmap_row의 길이이므로, weights의 열 수도 ifmap_row의 길이와 같아야 합니다.
    # weights.shape[1]은 weights의 각 행의 길이입니다.
    if weights.shape[1] != expected_ifmap_len:
        raise ValueError(f"weights 배열의 열 수는 q * s ({expected_ifmap_len})와 같아야 하지만, 실제 열 수는 {weights.shape[1]}입니다.")


    ifmap_row = np.array(ifmap_row)

    # ACC 결과를 저장할 배열을 초기화합니다.
    acc_results = np.zeros(p)

    # 그림에 설명된 대로 연산을 수행합니다.
    # 각 커널 (weights의 각 행)에 대해:
    for i in range(p): # p는 커널의 수
        # ifmap_row의 각 요소와 해당 weights 행의 각 요소를 곱하여 누적합니다.
        # NumPy의 dot product를 사용하여 효율적으로 수행할 수 있습니다.
        acc_results[i] = np.dot(ifmap_row, weights[i, :])

    return acc_results

# --- 예시 사용 ---
# 그림의 예시 값 (p=6, q=4, s=3)

ifmap_ra_iter0_row0 = [0x00000000, 0x00000001, 0x00000002, 0x00000019, 0x0000001A, 0x0000001B, 0x00000032, 0x00000033, 0x00000034, 0x0000004B, 0x0000004C, 0x0000004D, 0x00000064, 0x00000065, 0x00000066] # 길이 15
ifmap_ra_iter0_row1 = [0x00000005, 0x00000006, 0x00000007, 0x0000001E, 0x0000001F, 0x00000020, 0x00000037, 0x00000038, 0x00000039, 0x00000050, 0x00000051, 0x00000052, 0x00000069, 0x0000006A, 0x0000006B] # 길이 15
ifmap_ra_iter0_row2 = [0x0000000A, 0x0000000B, 0x0000000C, 0x00000023, 0x00000024, 0x00000025, 0x0000003C, 0x0000003D, 0x0000003E, 0x00000055, 0x00000056, 0x00000057, 0x0000006E, 0x0000006F, 0x00000070] # 길이 15
ifmap_ra_iter0_row3 = [0x0000000F, 0x00000010, 0x00000011, 0x00000028, 0x00000029, 0x0000002A, 0x00000041, 0x00000042, 0x00000043, 0x0000005A, 0x0000005B, 0x0000005C, 0x00000073, 0x00000074, 0x00000075] # 길이 15
ifmap_ra_iter0_row4 = [0x00000014, 0x00000015, 0x00000016, 0x0000002D, 0x0000002E, 0x0000002F, 0x00000046, 0x00000047, 0x00000048, 0x0000005F, 0x00000060, 0x00000061, 0x00000078, 0x00000079, 0x0000007A] # 길이 15
ifmap_ra_iter1_row0 = [0x00000001, 0x00000002, 0x00000003, 0x0000001A, 0x0000001B, 0x0000001C, 0x00000033, 0x00000034, 0x00000035, 0x0000004C, 0x0000004D, 0x0000004E, 0x00000065, 0x00000066, 0x00000067] # 길이 15
ifmap_ra_iter1_row1 = [0x00000006, 0x00000007, 0x00000008, 0x0000001F, 0x00000020, 0x00000021, 0x00000038, 0x00000039, 0x0000003A, 0x00000051, 0x00000052, 0x00000053, 0x0000006A, 0x0000006B, 0x0000006C] # 길이 15
ifmap_ra_iter1_row2 = [0x0000000B, 0x0000000C, 0x0000000D, 0x00000024, 0x00000025, 0x00000026, 0x0000003D, 0x0000003E, 0x0000003F, 0x00000056, 0x00000057, 0x00000058, 0x0000006F, 0x00000070, 0x00000071] # 길이 15
ifmap_ra_iter1_row3 = [0x00000010, 0x00000011, 0x00000012, 0x00000029, 0x0000002A, 0x0000002B, 0x00000042, 0x00000043, 0x00000044, 0x0000005B, 0x0000005C, 0x0000005D, 0x00000074, 0x00000075, 0x00000076] # 길이 15
ifmap_ra_iter1_row4 = [0x00000015, 0x00000016, 0x00000017, 0x0000002E, 0x0000002F, 0x00000030, 0x00000047, 0x00000048, 0x00000049, 0x00000060, 0x00000061, 0x00000062, 0x00000079, 0x0000007A, 0x0000007B] # 길이 15
ifmap_ra_iter2_row0 = [0x00000002, 0x00000003, 0x00000004, 0x0000001B, 0x0000001C, 0x0000001D, 0x00000034, 0x00000035, 0x00000036, 0x0000004D, 0x0000004E, 0x0000004F, 0x00000066, 0x00000067, 0x00000068] # 길이 15
ifmap_ra_iter2_row1 = [0x00000007, 0x00000008, 0x00000009, 0x00000020, 0x00000021, 0x00000022, 0x00000039, 0x0000003A, 0x0000003B, 0x00000052, 0x00000053, 0x00000054, 0x0000006B, 0x0000006C, 0x0000006D] # 길이 15
ifmap_ra_iter2_row2 = [0x0000000C, 0x0000000D, 0x0000000E, 0x00000025, 0x00000026, 0x00000027, 0x0000003E, 0x0000003F, 0x00000040, 0x00000057, 0x00000058, 0x00000059, 0x00000070, 0x00000071, 0x00000072] # 길이 15
ifmap_ra_iter2_row3 = [0x00000011, 0x00000012, 0x00000013, 0x0000002A, 0x0000002B, 0x0000002C, 0x00000043, 0x00000044, 0x00000045, 0x0000005C, 0x0000005D, 0x0000005E, 0x00000075, 0x00000076, 0x00000077] # 길이 15
ifmap_ra_iter2_row4 = [0x00000016, 0x00000017, 0x00000018, 0x0000002F, 0x00000030, 0x00000031, 0x00000048, 0x00000049, 0x0000004A, 0x00000061, 0x00000062, 0x00000063, 0x0000007A, 0x0000007B, 0x0000007C] # 길이 15

# wght_ra_row0, wght_ra_row1, wght_ra_row2는 각각 60개의 요소를 가짐.
# 함수는 weights를 p x (q*s) 형태로 받는데, 여기서 q*s는 ifmap_row의 길이와 같아야 함.
# ifmap_ra_iterX_rowY 의 길이는 15이므로, q*s = 15가 되어야 함.
# weights_ra_row의 길이는 60. 이를 4개의 행으로 나누면 각 행의 길이는 15가 됩니다.
# 따라서 p=4, q=5, s=3 (q*s = 15) 로 설정하는 것은 올바른 것 같습니다.
wght_ra_row0 = [0x00000000, 0x00000001, 0x00000002, 0x00000009, 0x0000000A, 0x0000000B, 0x00000012, 0x00000013, 0x00000014, 0x0000001B, 0x0000001C, 0x0000001D, 0x00000024, 0x00000025, 0x00000026, 0x0000002D, 0x0000002E, 0x0000002F, 0x00000036, 0x00000037, 0x00000038, 0x0000003F, 0x00000040, 0x00000041, 0x00000048, 0x00000049, 0x0000004A, 0x00000051, 0x00000052, 0x00000053, 0x0000005A, 0x0000005B, 0x0000005C, 0x00000063, 0x00000064, 0x00000065, 0x0000006C, 0x0000006D, 0x0000006E, 0x00000075, 0x00000076, 0x00000077, 0x00000080, 0x00000081, 0x00000082, 0x00000087, 0x00000088, 0x00000089, 0x00000090, 0x00000091, 0x00000092, 0x00000099, 0x0000009A, 0x0000009B, 0x000000A2, 0x000000A3, 0x000000A4, 0x000000AB, 0x000000AC, 0x000000AD]
wght_ra_row1 = [0x00000003, 0x00000004, 0x00000005, 0x0000000C, 0x0000000D, 0x0000000E, 0x00000015, 0x00000016, 0x00000017, 0x0000001E, 0x0000001F, 0x00000020, 0x00000027, 0x00000028, 0x00000029, 0x00000030, 0x00000031, 0x00000032, 0x00000039, 0x0000003A, 0x0000003B, 0x00000042, 0x00000043, 0x00000044, 0x0000004B, 0x0000004C, 0x0000004D, 0x00000054, 0x00000055, 0x00000056, 0x0000005D, 0x0000005E, 0x0000005F, 0x00000066, 0x00000067, 0x00000068, 0x0000006F, 0x00000070, 0x00000071, 0x00000078, 0x00000079, 0x0000007A, 0x00000081, 0x00000082, 0x00000083, 0x0000008A, 0x0000008B, 0x0000008C, 0x00000093, 0x00000094, 0x00000095, 0x0000009C, 0x0000009D, 0x0000009E, 0x000000A5, 0x000000A6, 0x000000A7, 0x000000AE, 0x000000AF, 0x000000B0]
wght_ra_row2 = [0x00000006, 0x00000007, 0x00000008, 0x0000000F, 0x00000010, 0x00000011, 0x00000018, 0x00000019, 0x0000001A, 0x00000021, 0x00000022, 0x00000023, 0x0000002A, 0x0000002B, 0x0000002C, 0x00000033, 0x00000034, 0x00000035, 0x0000003C, 0x0000003D, 0x0000003E, 0x00000045, 0x00000046, 0x00000047, 0x0000004E, 0x0000004F, 0x00000050, 0x00000057, 0x00000058, 0x00000059, 0x00000060, 0x00000061, 0x00000062, 0x00000069, 0x0000006A, 0x0000006B, 0x00000072, 0x00000073, 0x00000074, 0x0000007B, 0x0000007C, 0x0000007D, 0x00000084, 0x00000085, 0x00000086, 0x0000008D, 0x0000008E, 0x0000008F, 0x00000096, 0x00000097, 0x00000098, 0x0000009F, 0x000000A0, 0x000000A1, 0x000000A8, 0x000000A9, 0x000000AA, 0x000000B1, 0x000000B2, 0x000000B3]

ifmap_example = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]

weights_example = [
    [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],
    [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],
    [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],
    [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],
    [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],
    [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]
]

# 함수 호출
try:
    acc_example = PE_1dconv(ifmap_example, weights_example, 6, 4, 3)

    # 모든 PE_1dconv 호출에서 weights 인자 형식을 수정합니다.
    # [list] 대신 list 형태로 전달합니다.
    res_PE00 = PE_1dconv(ifmap_ra_iter0_row0, [wght_ra_row0[0:15], wght_ra_row0[15:30], wght_ra_row0[30:45], wght_ra_row0[45:60]], 4, 5, 3)
    res_PE01 = PE_1dconv(ifmap_ra_iter0_row1, [wght_ra_row0[0:15], wght_ra_row0[15:30], wght_ra_row0[30:45], wght_ra_row0[45:60]], 4, 5, 3)
    res_PE02 = PE_1dconv(ifmap_ra_iter0_row2, [wght_ra_row0[0:15], wght_ra_row0[15:30], wght_ra_row0[30:45], wght_ra_row0[45:60]], 4, 5, 3)
    res_PE10 = PE_1dconv(ifmap_ra_iter0_row1, [wght_ra_row1[0:15], wght_ra_row1[15:30], wght_ra_row1[30:45], wght_ra_row1[45:60]], 4, 5, 3)
    res_PE11 = PE_1dconv(ifmap_ra_iter0_row2, [wght_ra_row1[0:15], wght_ra_row1[15:30], wght_ra_row1[30:45], wght_ra_row1[45:60]], 4, 5, 3)
    res_PE12 = PE_1dconv(ifmap_ra_iter0_row3, [wght_ra_row1[0:15], wght_ra_row1[15:30], wght_ra_row1[30:45], wght_ra_row1[45:60]], 4, 5, 3)
    res_PE20 = PE_1dconv(ifmap_ra_iter0_row2, [wght_ra_row2[0:15], wght_ra_row2[15:30], wght_ra_row2[30:45], wght_ra_row2[45:60]], 4, 5, 3)
    res_PE21 = PE_1dconv(ifmap_ra_iter0_row3, [wght_ra_row2[0:15], wght_ra_row2[15:30], wght_ra_row2[30:45], wght_ra_row2[45:60]], 4, 5, 3)
    res_PE22 = PE_1dconv(ifmap_ra_iter0_row4, [wght_ra_row2[0:15], wght_ra_row2[15:30], wght_ra_row2[30:45], wght_ra_row2[45:60]], 4, 5, 3)
    
    print("--- example for p=6, q=4, s=3 ---")
    print(acc_example)
    print()
    print("--- test result for p=4, q=5, s=3---")
    print(f'PE00 : {res_PE00}')
    print(f'PE01 : {res_PE01}')
    print(f'PE02 : {res_PE02}')
    print(f'PE10 : {res_PE10}')
    print(f'PE11 : {res_PE11}')
    print(f'PE12 : {res_PE12}')
    print(f'PE20 : {res_PE20}')
    print(f'PE21 : {res_PE21}')
    print(f'PE22 : {res_PE22}')

except ValueError as e:
    print(f"오류: {e}")